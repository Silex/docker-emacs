#!/usr/bin/env ruby

require 'yaml'
require 'json'
require 'optparse'
require 'fileutils'

class String
  def quotify
    format('"%s"', self)
  end

  def backquotify
    format('`%s`', self)
  end
end

class Image
  REPOSITORY    = 'silex/emacs'
  IMAGES_YML    = 'images.yml'

  attr_reader :os
  attr_reader :version
  attr_reader :target

  class << self
    def all
      images = []
      versions.each do |version|
        exclusion = exclusions.find { |h| h['version'] == version }
        oses.each do |os|
          next if exclusion&.dig('os')&.include?(os)
          targets.each do |target|
            next if exclusion&.dig('target')&.include?(target)
            images << Image.new(version: version, os: os, target: target)
          end
        end
      end
      images
    end

    def data
      @data ||= YAML.safe_load(File.read(IMAGES_YML), symbolize_names: false)
    end

    def versions
      data['versions'].map(&:to_s)
    end

    def oses
      data['oses']
    end

    def targets
      data['targets']
    end

    def major_latests
      versions
        .reject { |v| v == 'master' }
        .group_by(&:to_i)
        .map { |_, vs| vs.sort.last }
        .sort
    end

    def exclusions
      # Ensure versions are strings
      data['exclusions'].map do |h|
        h['version'] = h['version'].to_s
        h
      end
    end

    def github
      {
        include: github_include,
        exclude: github_exclude
      }
    end

    def github_include
      include = [{ targets: targets }]
      with_excluded_targets = exclusions.select{ |h| h.has_key?('target') }
      with_excluded_targets.each do |h|
        include << { version: h['version'], targets: targets - h['target'] }
      end
      include
    end

    def github_exclude
      with_excluded_os = exclusions.select{ |h| h.has_key?('os') }
      with_excluded_os.flat_map do |h|
        h['os'].map do |os|
          { version: h['version'], os: os }
        end
      end
    end

    def to_json
      {
        versions: versions,
        oses: oses,
        targets: targets,
        exclusions: exclusions,
        github: github,
        images: all
      }.to_json
    end
  end

  def initialize(version:, os:, target:)
    @version = version
    @os      = os
    @target  = target
  end

  def major_latest?
    self.class.major_latests.include?(version)
  end

  def latest?
    self.class.major_latests.last == version
  end

  def tags
    tags = []

    # Base tag
    tags << format('%s-%s-%s', version, os, target)

    # Pretty tag for debian
    if os == 'debian'
      tags << format('%s-%s', version, target)
    end

    # Handle major latest
    if major_latest?
      tags += tags.map { |t| t.sub(/\.\d+/, '') }
      if latest?
        additional_tag = (os == 'debian' && target == 'base') ? 'latest' : tags.last.sub(/\d+-/, '')
        tags << additional_tag
      end
    end

    # Handle ci tags
    tags += tags.map { |t| t.sub('ci-', '') } if target.include?('ci-')

    # Pretty tag for base
    tags.map!{ |t| t.sub('-base', '') }

    tags
  end

  def tags_with_repository
    tags.map do |s|
      format('%s:%s', REPOSITORY, s)
    end
  end

  def cache
    format('%s-cache:%s-%s', REPOSITORY, os, version)
  end

  # Returns the corresponding Nix version.
  def nix_version
    return 'emacs-snapshot' if version == 'master'
    format('emacs-%s', version.gsub('.', '-'))
  end

  def context
    File.join('dockerfiles', os)
  end

  def dockerfile
    File.join(context, 'Dockerfile')
  end

  def to_json(options = nil)
    {
      version: version,
      os: os,
      target: target,
      nix_version: nix_version,
      context: context,
      tags: tags,
      tags_with_repository: tags_with_repository,
      cache: cache,
      major_latest?: major_latest?,
      latest?: latest?,
    }.to_json
  end
end

def generate_readme(images)
  puts '>>> generating README.md'
  # Group by version and reverse the order if needed
  tags = images.group_by(&:version).values.reverse.flatten.flat_map do |image|
    format('- [%s](https://github.com/Silex/docker-emacs/blob/master/%s)',
           image.tags.map(&:backquotify).join(', '),
           image.dockerfile)
  end

  readme = 'README.md.template'
  unless File.exist?(readme)
    warn "README template not found at #{readme}"
    return
  end

  content = File.read(readme)
  content.gsub!('{{TAGS}}', tags.join("\n"))
  File.write('README.md', content)
end

def run(options)
  if options[:generate]
    images = Image.all
    generate_readme(images)
  end

  puts Image.to_json if options[:json]
end

def parse_options
  options = {}
  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: images [options]'
    opts.separator ''
    opts.separator 'Generate the Dockerfiles & README or return images JSON.'

    opts.on('--generate', 'Generate Dockerfiles and README') do
      options[:generate] = true
    end

    opts.on('--json', 'Output images as JSON') do
      options[:json] = true
    end

    opts.on('-h', '--help', 'Print usage') do
      puts opts
      exit
    end
  end

  begin
    parser.parse!
  rescue OptionParser::InvalidOption => e
    warn e.message
    puts parser
    exit(1)
  end

  if options.empty?
    puts parser
    exit(1)
  end

  options
end

def main
  options = parse_options
  Dir.chdir(File.expand_path('..', __dir__)) do
    run(options)
  end
end

main
