#!/usr/bin/env bash

set -euxo pipefail

if [[ $# -ne 2 ]]; then
  echo "usage: $0 DIRECTORY TAGS" 1>&2
  exit 1
fi

BUILD_DIRECTORY="$1"
BUILD_TAGS="$2"
BUILD_CACHE="$(echo "$BUILD_TAGS" | cut -d' ' -f1)"
DOCKER_BUILDX_BUILDER="emacs-$CI_JOB_NAME-builder"

function cleanup
{
  remove-containers $DOCKER_BUILDX_BUILDER
  ssh root@$DOCKER_ARM_HOST "bash /dev/stdin $DOCKER_BUILDX_BUILDER" < $(which remove-containers)
}

# Ensure ASLR is disabled
sysctl kernel.randomize_va_space=0
ssh root@$DOCKER_ARM_HOST sysctl kernel.randomize_va_space=0

# Login to docker hub
base64 -d $FILE64_DOCKER_PASSWORD | docker login -u "$(base64 -d $FILE64_DOCKER_USER)" --password-stdin

# Ensure buildx is at the correct version
BUILDX_URL="https://github.com/docker/buildx/releases/download/v$DOCKER_BUILDX_VERSION/buildx-v$DOCKER_BUILDX_VERSION.linux-amd64"
BUILDX_PATH="$HOME/.docker/cli-plugins"
mkdir -p "$BUILDX_PATH"
wget -qO "$BUILDX_PATH/docker-buildx" "$BUILDX_URL"
chmod a+x "$BUILDX_PATH/docker-buildx"

# Remove old containers
cleanup
trap cleanup EXIT

# Create builder
docker buildx create --name $DOCKER_BUILDX_BUILDER
docker buildx create --append --name $DOCKER_BUILDX_BUILDER ssh://root@$DOCKER_ARM_HOST
docker buildx inspect --bootstrap $DOCKER_BUILDX_BUILDER
docker buildx use $DOCKER_BUILDX_BUILDER

# Build tags
push=''
[[ "$CI_COMMIT_BRANCH" = "master" ]] && push='--push'
for tag in $BUILD_TAGS; do
  docker buildx build \
         --platform="$DOCKER_PLATFORMS" \
         --pull $push \
         --cache-from="$BUILD_CACHE" \
         --cache-to="type=inline" \
         --tag="$tag" \
         "$BUILD_DIRECTORY"
done

# Test the built image works
[[ "$CI_COMMIT_BRANCH" = "master" ]] && docker run --rm "$BUILD_CACHE" emacs --version

exit 0
