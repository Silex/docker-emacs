#!/usr/bin/env ruby

require 'yaml'
require 'ostruct'
require 'optparse'
require 'fileutils'

class Object
  def deep_clone
    Marshal.load(Marshal.dump(self))
  end
end

class String
  def quotify
    format('"%s"', self)
  end

  def backquotify
    format('`%s`', self)
  end
end

class Image < OpenStruct
  def self.load(file)
    YAML.load_file(file).map do |h|
      Image.new(h)
    end
  end

  def tag
    tags.first
  end

  def aliases
    tags[1..-1]
  end

  def version
    # Ensure version is a string
    super.to_s
  end

  def nix_version
    return 'emacs-snapshot' if version == 'master'
    format('emacs-%s', version.gsub('.', '-'))
  end

  def directory
    File.join(version, template)
  end

  def dockerfile
    File.join(directory, 'Dockerfile')
  end

  def tags
    # Ensure tags are strings
    super.map(&:to_s)
  end

  def gitlab_stage
    case depends
      when nil
        'stage1'
      when /ci/
        'stage3'
      else
        'stage2'
    end
  end
end

def make_patches_string(urls)
  return '' unless urls
  commands = urls.map{ |s| format('curl -sSLOJ "%s"', s) }
  commands << 'git apply *.patch'
  commands.map!{ |s| format("    %s && \\\n", s) }
  commands.join
end

def generate_dockerfiles(images)
  puts '>>> generating dockerfiles'
  images.map(&:directory).uniq.each{ |path| FileUtils.rm_rf(path) }
  images.each do |image|
    FileUtils.mkdir_p(image.directory)
    content = File.read(File.join('templates', image.template, 'Dockerfile'))
    content.gsub!('{{DEPENDS}}', image.depends.to_s)
    content.gsub!('{{NIX-VERSION}}', image.nix_version.to_s)
    content.gsub!('{{BRANCH}}', image.branch.to_s)
    content.gsub!(/\n{{CACHE}}\n/, image.cache ? format("\nADD %s /tmp/cache\n", image.cache) : '')
    File.write(image.dockerfile, content)
  end
end

def generate_readme(images)
  puts '>>> generating README.md'
  tags = images.map do |image|
    format('- [%s](https://github.com/Silex/docker-emacs/blob/master/%s)',
           image.tags.map(&:backquotify).join(', '),
           image.dockerfile)
  end.flatten
  content = File.read('templates/README.md')
  content.gsub!('{{TAGS}}', tags.join("\n"))
  File.write('README.md', content)
end

def generate_gitlab(images)
  puts '>>> generating .gitlab-ci.yml'
  h = YAML.load_file('templates/.gitlab-ci.yml')
  template = h.delete('template')

  gitlab_groups = images.map do |image, i|
    group = image.version.to_i
    group = image.version if group == 0
    [image, format('group-%s', group)]
  end.to_h

  gitlab_needs = images.select(&:depends).map do |image|
    [image, [format('img-%s', image.depends)]]
  end.to_h

  images.each do |image|
    params = template.deep_clone
    params['stage'] = image.gitlab_stage
    params['script'].gsub!('{{DIRECTORY}}', image.directory)
    params['script'].gsub!('{{TAGS}}', image.tags.map{ |s| format('silex/emacs:%s', s) }.join(' '))
    params['resource_group'] = gitlab_groups[image]
    params['needs'] = gitlab_needs[image]
    if image.platforms
      params['variables'] = { 'DOCKER_PLATFORMS' => image.platforms }
    end
    name = format('img-%s', image.tag)
    h[name] = params.compact
  end
  File.write('.gitlab-ci.yml', h.to_yaml(line_width: -1))
end

def generate(source)
  images = Image.load(source)
  generate_dockerfiles(images)
  generate_readme(images)
  generate_gitlab(images)
end

begin
  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: generate [SOURCE=images.yml]'
    opts.separator ''
    opts.separator 'Generate the Dockerfiles, README and gitlab files.'
  end
  parser.parse!
  source = ARGV.empty? ? 'images.yml' : ARGV.first

  Dir.chdir(File.join(File.dirname(__FILE__), '..')) do
    generate(source)
  end
rescue OptionParser::ParseError => e
  $stderr.puts e.message
  $stderr.puts
  $stderr.puts parser.help
  exit(1)
rescue => e
  $stderr.puts(e.message)
  exit(1)
end
