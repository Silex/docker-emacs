#!/usr/bin/env ruby

require 'yaml'
require 'ostruct'
require 'optparse'
require 'fileutils'

class Object
  def deep_clone
    Marshal.load(Marshal.dump(self))
  end
end

class String
  def quotify
    format('"%s"', self)
  end

  def backquotify
    format('`%s`', self)
  end

  def blank?
    self.strip.empty?
  end
end

class Image < OpenStruct
  def self.load(file)
    YAML.load_file(file).map do |h|
      Image.new(h)
    end
  end

  def tag
    tags.first
  end

  def aliases
    tags[1..-1]
  end

  def version
    # Ensure version is a string
    self['version'].to_s
  end

  def depends
    format('silex/emacs:%s', self['depends'])
  end

  def nix_version
    return 'emacs-snapshot' if version == 'master'
    format('emacs-%s', version.gsub('.', '-'))
  end

  def directory
    File.join(version, template)
  end

  def dockerfile
    File.join(directory, 'Dockerfile')
  end

  def tags
    # Ensure tags are strings
    self['tags'].map(&:to_s)
  end
end

def generate_dockerfiles(images)
  puts '>>> generating dockerfiles'
  images.map(&:directory).uniq.each{ |path| FileUtils.rm_rf(path) }
  images.each do |image|
    FileUtils.mkdir_p(image.directory)
    content = File.read(File.join('templates', image.template, 'Dockerfile'))
    content.gsub!('{{DEPENDS}}', image.depends.to_s)
    content.gsub!('{{NIX_VERSION}}', image.nix_version)
    content.gsub!('{{BRANCH}}', image.branch.to_s)
    File.write(image.dockerfile, content)
  end
end

def generate_readme(images)
  puts '>>> generating README.md'
  tags = images.map do |image|
    format('- [%s](https://github.com/Silex/docker-emacs/blob/master/%s)',
           image.tags.map(&:backquotify).join(', '),
           image.dockerfile)
  end.flatten
  content = File.read('templates/README.md')
  content.gsub!('{{TAGS}}', tags.join("\n"))
  File.write('README.md', content)
end

def generate(source)
  images = Image.load(source)
  generate_dockerfiles(images)
  generate_readme(images)
end

begin
  parser = OptionParser.new do |opts|
    opts.banner = 'Usage: generate [SOURCE=images.yml]'
    opts.separator ''
    opts.separator 'Generate the Dockerfiles, README and gitlab files.'
  end
  parser.parse!
  source = ARGV.empty? ? 'images.yml' : ARGV.first

  Dir.chdir(File.join(File.dirname(__FILE__), '..')) do
    generate(source)
  end
rescue OptionParser::ParseError => e
  $stderr.puts e.message
  $stderr.puts
  $stderr.puts parser.help
  exit(1)
rescue => e
  $stderr.puts(e.message)
  exit(1)
end
